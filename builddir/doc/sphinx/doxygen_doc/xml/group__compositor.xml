<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__compositor" kind="group">
    <compoundname>compositor</compoundname>
    <title>Compositor</title>
    <innerclass refid="structweston__compositor" prot="public">weston_compositor</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__compositor_1ga8e5847024d92d76171a144d15c5452da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_get_time</definition>
        <argsstring>(struct timespec *time)</argsstring>
        <name>weston_compositor_get_time</name>
        <param>
          <type>struct timespec *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>weston_compositor_get_time </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="2076" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="2076" bodyend="2079"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gad2c7ea85353aed21f10e1e663e216ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structweston__view" kindref="compound">weston_view</ref> *</type>
        <definition>struct weston_view* weston_compositor_pick_view</definition>
        <argsstring>(struct weston_compositor *compositor, wl_fixed_t x, wl_fixed_t y, wl_fixed_t *vx, wl_fixed_t *vy)</argsstring>
        <name>weston_compositor_pick_view</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>wl_fixed_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>wl_fixed_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>wl_fixed_t *</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>wl_fixed_t *</type>
          <declname>vy</declname>
        </param>
        <briefdescription>
<para>weston_compositor_pick_view </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="2085" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="2085" bodyend="2121"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga674d4dd1642c36ca73a7ddc246a4b411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_damage_all</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_damage_all</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>weston_compositor_damage_all </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="2441" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="2441" bodyend="2447"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga8477eedbbb0660db00b0c1be93c913db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_schedule_repaint</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_schedule_repaint</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>weston_compositor_schedule_repaint </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="3231" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="3231" bodyend="3237"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga7efd2631f78297037a9ba5668b5fa9ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_wake</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_wake</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>Restores the compositor to active status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If the compositor was in a sleeping mode, all outputs are powered back on via DPMS. Otherwise if the compositor was inactive (idle/locked, offscreen, or sleeping) then the compositor&apos;s wake signal will fire.</para>
<para>Restarts the idle timer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="4793" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="4793" bodyend="4813"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gabbeb356dd9688004330df598b514a27c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_offscreen</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_offscreen</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>Turns off rendering and frame events for the compositor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is used for example to prevent further rendering while the compositor is shutting down.</para>
<para>Stops the idle timer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="4827" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="4827" bodyend="4837"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga0d01f39e15e169b13384be82bb05370d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_sleep</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_sleep</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>Powers down all attached output devices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Causes rendering to the outputs to cease, and no frame events to be sent. Only powers down the outputs if the compositor is not already in sleep mode.</para>
<para>Stops the idle timer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="4852" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="4852" bodyend="4860"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gac0da9a90074155e609e2f5845cbf25fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_stack_plane</definition>
        <argsstring>(struct weston_compositor *ec, struct weston_plane *plane, struct weston_plane *above)</argsstring>
        <name>weston_compositor_stack_plane</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>ec</declname>
        </param>
        <param>
          <type>struct <ref refid="structweston__plane" kindref="compound">weston_plane</ref> *</type>
          <declname>plane</declname>
        </param>
        <param>
          <type>struct <ref refid="structweston__plane" kindref="compound">weston_plane</ref> *</type>
          <declname>above</declname>
        </param>
        <briefdescription>
<para>weston_compositor_stack_plane </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="4924" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="4924" bodyend="4932"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gae456afce819647679741443d15cd82cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void weston_compositor_schedule_heads_changed</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_schedule_heads_changed</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>Schedule a call on idle to heads_changed callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The Compositor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="5126" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="5126" bodyend="5136"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga9cc453a480c9083e2b15d974f0c9d61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_add_head</definition>
        <argsstring>(struct weston_compositor *compositor, struct weston_head *head)</argsstring>
        <name>weston_compositor_add_head</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>struct <ref refid="structweston__head" kindref="compound">weston_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Register a new head. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>The head to register, must not be already registered.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This signals the core that a new head has become available, leading to heads_changed hook being called later. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="5150" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="5150" bodyend="5159"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gaaf5629bbdce30062a548444c7df59205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_add_heads_changed_listener</definition>
        <argsstring>(struct weston_compositor *compositor, struct wl_listener *listener)</argsstring>
        <name>weston_compositor_add_heads_changed_listener</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>struct wl_listener *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Adds a listener to be called when heads change. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>The listener to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The listener notify function argument is <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref>.</para>
<para>The listener function will be called after heads are added or their connection status has changed. Several changes may be accumulated into a single call. The user is expected to iterate over the existing heads and check their statuses to find out what changed.</para>
<para><simplesect kind="see"><para><ref refid="group__compositor_1ga23fa98d05ed6886179c337931ae8a407" kindref="member">weston_compositor_iterate_heads</ref>, <ref refid="group__head_1gad0da27f9a2e98faf8aecf84704935440" kindref="member">weston_head_is_connected</ref>, <ref refid="group__head_1ga8d49a887b440265b363a5075fefff343" kindref="member">weston_head_is_enabled</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="5178" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="5178" bodyend="5182"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga23fa98d05ed6886179c337931ae8a407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structweston__head" kindref="compound">weston_head</ref> *</type>
        <definition>struct weston_head* weston_compositor_iterate_heads</definition>
        <argsstring>(struct weston_compositor *compositor, struct weston_head *iter)</argsstring>
        <name>weston_compositor_iterate_heads</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>struct <ref refid="structweston__head" kindref="compound">weston_head</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Iterate over available heads. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>The iterator, or NULL for start. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next available head in the list.</para>
</simplesect>
Returns all available heads, regardless of being connected or enabled.</para>
<para>You can iterate over all heads as follows: <programlisting><codeline><highlight class="normal">struct<sp/>weston_head<sp/>*head<sp/>=<sp/>NULL;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">while<sp/>((head<sp/>=<sp/>weston_compositor_iterate_heads(compositor,<sp/>head)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If you cause <computeroutput>iter</computeroutput> to be removed from the list, you cannot use it to continue iterating. Removing any other item is safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="5207" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="5207" bodyend="5228"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga794fc39a73df6dca432c753825ef2a1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void weston_compositor_remove_output</definition>
        <argsstring>(struct weston_output *output)</argsstring>
        <name>weston_compositor_remove_output</name>
        <param>
          <type>struct <ref refid="structweston__output" kindref="compound">weston_output</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Removes output from compositor&apos;s list of enabled outputs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structweston__output" kindref="compound">weston_output</ref> object that is being removed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The following happens:</para>
<para><itemizedlist>
<listitem><para>The output assignments of all views in the current scenegraph are recomputed.</para>
</listitem><listitem><para>Presentation feedback is discarded.</para>
</listitem><listitem><para>Compositor is notified that outputs were changed and applies the necessary changes to re-layout outputs.</para>
</listitem><listitem><para>The output is put back in the pending outputs list.</para>
</listitem><listitem><para>Signal is emitted to notify all users of the <ref refid="structweston__output" kindref="compound">weston_output</ref> object that the output is being destroyed.</para>
</listitem><listitem><para>wl_output protocol objects referencing this <ref refid="structweston__output" kindref="compound">weston_output</ref> are made inert, and the wl_output global is removed.</para>
</listitem><listitem><para>The output&apos;s internal ID is released. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="6119" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="6119" bodyend="6149"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga3bf54722d538ec9410a82d1242a84958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_add_pending_output</definition>
        <argsstring>(struct weston_output *output, struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_add_pending_output</name>
        <param>
          <type>struct <ref refid="structweston__output" kindref="compound">weston_output</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>Adds <ref refid="structweston__output" kindref="compound">weston_output</ref> object to pending output list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structweston__output" kindref="compound">weston_output</ref> object to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The opposite of this operation is built into <ref refid="group__output_1ga4f2b78dfe24872b341fccb812d1e9473" kindref="member">weston_output_release()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="6345" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="6345" bodyend="6353"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gae835d9bf9af471b041a588778a774db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_flush_heads_changed</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_flush_heads_changed</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>Forces a synchronous call to heads_changed hook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If there are new or changed heads, calls the heads_changed hook and returns after the hook returns. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="6559" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="6559" bodyend="6565"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga2a4277e31b2ef83535ad5ace9cb61488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structweston__output" kindref="compound">weston_output</ref> *</type>
        <definition>struct weston_output* weston_compositor_find_output_by_name</definition>
        <argsstring>(struct weston_compositor *compositor, const char *name)</argsstring>
        <name>weston_compositor_find_output_by_name</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Find an output by its given name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The output name to search for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An existing output with the given name, or NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="6658" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="6658" bodyend="6672"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gafee0c9120b6d2ffcdbf3d7cae5837975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structweston__output" kindref="compound">weston_output</ref> *</type>
        <definition>struct weston_output* weston_compositor_create_output</definition>
        <argsstring>(struct weston_compositor *compositor, const char *name)</argsstring>
        <name>weston_compositor_create_output</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a named output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name for the output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="structweston__output" kindref="compound">weston_output</ref></computeroutput>, or NULL on failure.</para>
</simplesect>
This creates a new <ref refid="structweston__output" kindref="compound">weston_output</ref> that starts with no heads attached.</para>
<para>An output must be configured and it must have at least one head before it can be enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="6688" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="6688" bodyend="6700"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gadc6c426dbd044667d0d1f5ec7ec47ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structweston__output" kindref="compound">weston_output</ref> *</type>
        <definition>struct weston_output* weston_compositor_create_output_with_head</definition>
        <argsstring>(struct weston_compositor *compositor, struct weston_head *head)</argsstring>
        <name>weston_compositor_create_output_with_head</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>struct <ref refid="structweston__head" kindref="compound">weston_head</ref> *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Create an output for an unused head. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>The head to attach to the output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new <computeroutput><ref refid="structweston__output" kindref="compound">weston_output</ref></computeroutput>, or NULL on failure.</para>
</simplesect>
This creates a new <ref refid="structweston__output" kindref="compound">weston_output</ref> that starts with the given head attached. The output inherits the name of the head. The head must not be already attached to another output.</para>
<para>An output must be configured before it can be enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="6717" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="6717" bodyend="6732"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga4fa96710c12bf0aee8935872bc1c7437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* weston_compositor_print_scene_graph</definition>
        <argsstring>(struct weston_compositor *ec)</argsstring>
        <name>weston_compositor_print_scene_graph</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para>Output information on how libweston is currently composing the scene graph. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7297" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7297" bodyend="7376"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gaa92b2b7d2b73302bf143e1c3245045f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* weston_compositor_get_test_data</definition>
        <argsstring>(struct weston_compositor *ec)</argsstring>
        <name>weston_compositor_get_test_data</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para>Retrieve testsuite data from compositor. </para>
        </briefdescription>
        <detaileddescription>
<para>The testsuite data can be defined by the test suite of projects that uses libweston and given to the compositor at the moment of its creation. This function should be used when we need to retrieve the testsuite private data from the compositor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ec</parametername>
</parameternamelist>
<parameterdescription>
<para>The weston compositor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The testsuite data.</para>
</simplesect>
<simplesect kind="see"><para>weston_compositor_test_data_init </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7408" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7408" bodyend="7411"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga081445a62197fac7bcbeeab449261373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
        <definition>struct weston_compositor* weston_compositor_create</definition>
        <argsstring>(struct wl_display *display, struct weston_log_context *log_ctx, void *user_data, const struct weston_testsuite_data *test_data)</argsstring>
        <name>weston_compositor_create</name>
        <param>
          <type>struct wl_display *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>struct <ref refid="structweston__log__context" kindref="compound">weston_log_context</ref> *</type>
          <declname>log_ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type>const struct <ref refid="structweston__testsuite__data" kindref="compound">weston_testsuite_data</ref> *</type>
          <declname>test_data</declname>
        </param>
        <briefdescription>
<para>Create the compositor. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions creates and initializes a compositor instance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The Wayland display to be used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an object that can later be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log_ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to weston_debug_compositor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>test_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional testsuite data, or NULL. using the <ref refid="group__compositor_1gaaecdc50a0ea2aebbf36a22db50e62385" kindref="member">weston_compositor_get_user_data</ref> function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The compositor instance on success or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7427" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7427" bodyend="7552"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gacc91a9f77baf1c72d967471bade09cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_shutdown</definition>
        <argsstring>(struct weston_compositor *ec)</argsstring>
        <name>weston_compositor_shutdown</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para>weston_compositor_shutdown </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7558" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7558" bodyend="7583"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga6299e93b80dfd70bd2c9c1603417f940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_exit_with_code</definition>
        <argsstring>(struct weston_compositor *compositor, int exit_code)</argsstring>
        <name>weston_compositor_exit_with_code</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exit_code</declname>
        </param>
        <briefdescription>
<para>weston_compositor_exit_with_code </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7589" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7589" bodyend="7596"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gad227efb7ecb34f771ad93dc86fdb5bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_set_default_pointer_grab</definition>
        <argsstring>(struct weston_compositor *ec, const struct weston_pointer_grab_interface *interface)</argsstring>
        <name>weston_compositor_set_default_pointer_grab</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>ec</declname>
        </param>
        <param>
          <type>const struct <ref refid="structweston__pointer__grab__interface" kindref="compound">weston_pointer_grab_interface</ref> *</type>
          <declname>interface</declname>
        </param>
        <briefdescription>
<para>weston_compositor_set_default_pointer_grab </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7602" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7602" bodyend="7614"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gabaca768863a217e3c5fa4d7519676a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int weston_compositor_set_presentation_clock</definition>
        <argsstring>(struct weston_compositor *compositor, clockid_t clk_id)</argsstring>
        <name>weston_compositor_set_presentation_clock</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>clockid_t</type>
          <declname>clk_id</declname>
        </param>
        <briefdescription>
<para>weston_compositor_set_presentation_clock </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7620" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7620" bodyend="7631"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gaab7e6328af752385d84c17b9eebddf74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int weston_compositor_set_presentation_clock_software</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_set_presentation_clock_software</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>For choosing the software clock, when the display hardware or API does not expose a compatible presentation timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7639" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7639" bodyend="7660"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga464e69b90dabde1e2f4797181f3dc65a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_read_presentation_clock</definition>
        <argsstring>(const struct weston_compositor *compositor, struct timespec *ts)</argsstring>
        <name>weston_compositor_read_presentation_clock</name>
        <param>
          <type>const struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>struct timespec *</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
<para>Read the current time from the Presentation clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ts</parametername>
</parameternamelist>
<parameterdescription>
<para>The current time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Reading the current time in user space is always imprecise to some degree.</para>
</simplesect>
This function is never meant to fail. If reading the clock does fail, an error message is logged and a zero time is returned. Callers are not supposed to detect or react to failures. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7677" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7677" bodyend="7696"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga321e3fcf45c3aa5f8d5280691f6232c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool weston_compositor_import_dmabuf</definition>
        <argsstring>(struct weston_compositor *compositor, struct linux_dmabuf_buffer *buffer)</argsstring>
        <name>weston_compositor_import_dmabuf</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>struct <ref refid="structlinux__dmabuf__buffer" kindref="compound">linux_dmabuf_buffer</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Import dmabuf buffer into current renderer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the dmabuf buffer to import </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on usable buffers, false otherwise</para>
</simplesect>
This function tests that the <ref refid="structlinux__dmabuf__buffer" kindref="compound">linux_dmabuf_buffer</ref> is usable for the current renderer. Returns false on unusable buffers. Usually usability is tested by importing the dmabufs for composition.</para>
<para>This hook is also used for detecting if the renderer supports dmabufs at all. If the renderer hook is NULL, dmabufs are not supported. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7715" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7715" bodyend="7726"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga4f29f61ed5f73015798a14bdabb73dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_destroy</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_destroy</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>Destroys the compositor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function cleans up the compositor state and then destroys it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor to be destroyed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7891" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7891" bodyend="7918"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gaf4e53253ff94f741ee4a04e7e52e302f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void weston_compositor_exit</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_exit</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>Instruct the compositor to exit. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions does not directly destroy the compositor object, it merely command it to start the tear down process. It is not guaranteed that the tear down will happen immediately.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>The compositor to tear down. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7931" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7931" bodyend="7934"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gaaecdc50a0ea2aebbf36a22db50e62385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* weston_compositor_get_user_data</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_get_user_data</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>Return the user data stored in the compositor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the user data pointer set with user_data parameter to the <ref refid="group__compositor_1ga081445a62197fac7bcbeeab449261373" kindref="member">weston_compositor_create</ref> function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7944" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7944" bodyend="7947"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1ga14405f588f9880d19e0764af6243e5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int weston_compositor_load_backend</definition>
        <argsstring>(struct weston_compositor *compositor, enum weston_compositor_backend backend, struct weston_backend_config *config_base)</argsstring>
        <name>weston_compositor_load_backend</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <param>
          <type>enum <ref refid="libweston_8h_1a6523745d75d8e1a9a9b8aec9c8c68036" kindref="member">weston_compositor_backend</ref></type>
          <declname>backend</declname>
        </param>
        <param>
          <type>struct <ref refid="structweston__backend__config" kindref="compound">weston_backend_config</ref> *</type>
          <declname>config_base</declname>
        </param>
        <briefdescription>
<para>Load a backend into a <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>A backend must be loaded to make a <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> work. A backend provides input and output capabilities, and determines the renderer to use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compositor</parametername>
</parameternamelist>
<parameterdescription>
<para>A compositor that has not had a backend loaded yet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>backend</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the backend file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config_base</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a backend-specific configuration structure&apos;s &apos;base&apos; member.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, or -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="7973" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="7973" bodyend="7998"/>
      </memberdef>
      <memberdef kind="function" id="group__compositor_1gac6e898461759aedc521674d927c4f433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int weston_compositor_load_xwayland</definition>
        <argsstring>(struct weston_compositor *compositor)</argsstring>
        <name>weston_compositor_load_xwayland</name>
        <param>
          <type>struct <ref refid="structweston__compositor" kindref="compound">weston_compositor</ref> *</type>
          <declname>compositor</declname>
        </param>
        <briefdescription>
<para>weston_compositor_load_xwayland </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/libweston/compositor.c" line="8004" column="1" bodyfile="/home/lzm/Wayland/weston/libweston/compositor.c" bodystart="8004" bodyend="8014"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
