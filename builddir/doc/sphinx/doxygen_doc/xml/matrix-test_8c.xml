<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="matrix-test_8c" kind="file" language="C++">
    <compoundname>matrix-test.c</compoundname>
    <includes local="yes">config.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">time.h</includes>
    <includes refid="matrix_8h" local="no">libweston/matrix.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/lzm/Wayland/weston/tests/matrix-test.c</label>
        <link refid="matrix-test_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>unistd.h</label>
      </node>
      <node id="7">
        <label>signal.h</label>
      </node>
      <node id="8">
        <label>time.h</label>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="9">
        <label>libweston/matrix.h</label>
        <link refid="matrix_8h"/>
      </node>
      <node id="2">
        <label>config.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structinverse__matrix" prot="public">inverse_matrix</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53" prot="public" static="no" strong="no">
        <type></type>
        <name>@35</name>
        <enumvalue id="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53adfa70e7c4b36a5c5c6b70987b50fc36c" prot="public">
          <name>TEST_OK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53ae3c68600768a9c9232c28229acefa4ff" prot="public">
          <name>TEST_NOT_INVERTIBLE_OK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53a95ff945c2f47eb10462e687007716732" prot="public">
          <name>TEST_FAIL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53afab64b0806b411adc2f414c1e55ac175" prot="public">
          <name>TEST_COUNT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="218" column="6" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="218" bodyend="223"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="matrix-test_8c_1ab2ebed32ce5f19fe61dfff979e6abc2b" prot="public" static="yes" mutable="no">
        <type>struct timespec</type>
        <definition>struct timespec begin_time</definition>
        <argsstring></argsstring>
        <name>begin_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="1" column="0" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int running</definition>
        <argsstring></argsstring>
        <name>running</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="246" column="12" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="matrix-test_8c_1a1557e425f3e20a2e7e2a09506f47a809" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reset_timer</definition>
        <argsstring>(void)</argsstring>
        <name>reset_timer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="45" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a3ac8182bfa6bfd87462a55cae8010b56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double read_timer</definition>
        <argsstring>(void)</argsstring>
        <name>read_timer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="51" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="51" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1aa731690caa06ede95c9f77247235d0fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double det3x3</definition>
        <argsstring>(const float *c0, const float *c1, const float *c2)</argsstring>
        <name>det3x3</name>
        <param>
          <type>const float *</type>
          <declname>c0</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="61" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="61" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1aaad6b73f3b51fe3ad74019792da53d89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double determinant</definition>
        <argsstring>(const struct weston_matrix *m)</argsstring>
        <name>determinant</name>
        <param>
          <type>const struct <ref refid="structweston__matrix" kindref="compound">weston_matrix</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="73" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="73" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a55006f65435787803ad6dbcc5c7c3a7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_permutation_matrix</definition>
        <argsstring>(const struct inverse_matrix *m)</argsstring>
        <name>print_permutation_matrix</name>
        <param>
          <type>const struct <ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="93" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="93" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a51622de3bf1a97501d337da88c0f5714" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_LU_decomposition</definition>
        <argsstring>(const struct inverse_matrix *m)</argsstring>
        <name>print_LU_decomposition</name>
        <param>
          <type>const struct <ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="107" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="107" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1acd5548b834f9c527dc85dcc9a03ed42a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_inverse_data_matrix</definition>
        <argsstring>(const struct inverse_matrix *m)</argsstring>
        <name>print_inverse_data_matrix</name>
        <param>
          <type>const struct <ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="140" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="140" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a7242782332abff8ad9c2e39c6603f962" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void print_matrix</definition>
        <argsstring>(const struct weston_matrix *m)</argsstring>
        <name>print_matrix</name>
        <param>
          <type>const struct <ref refid="structweston__matrix" kindref="compound">weston_matrix</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="157" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="157" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a6d8ceb1a4e6d59dbb2e41f0c00b9752a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double frand</definition>
        <argsstring>(void)</argsstring>
        <name>frand</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="169" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a2db6dba92c0df9ea3cad8540e31145bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void randomize_matrix</definition>
        <argsstring>(struct weston_matrix *m)</argsstring>
        <name>randomize_matrix</name>
        <param>
          <type>struct <ref refid="structweston__matrix" kindref="compound">weston_matrix</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="176" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="176" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a2b5ff95e8150f57bc6068d96751940e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double test_inverse</definition>
        <argsstring>(struct weston_matrix *m)</argsstring>
        <name>test_inverse</name>
        <param>
          <type>struct <ref refid="structweston__matrix" kindref="compound">weston_matrix</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="192" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="192" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a40180e42e1cf6c3fbbb74f44cb78ca67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int test</definition>
        <argsstring>(void)</argsstring>
        <name>test</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="226" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="226" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a94ea34744ac382b8ee0fa54dc7d17c26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stopme</definition>
        <argsstring>(int n)</argsstring>
        <name>stopme</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="248" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1aa08483b6b670ef8309eece96ffd08e1f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_loop_precision</definition>
        <argsstring>(void)</argsstring>
        <name>test_loop_precision</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="254" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="254" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a472fcf18477f32938f2d9f5361a43675" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_loop_speed_matrixvector</definition>
        <argsstring>(void)</argsstring>
        <name>test_loop_speed_matrixvector</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="274" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="274" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a8e1969744a7eb5dd4d58ef4fc9437d7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_loop_speed_inversetransform</definition>
        <argsstring>(void)</argsstring>
        <name>test_loop_speed_inversetransform</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="299" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="299" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1abb914aa1d0ea5171320f0e7f3ebac842" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_loop_speed_invert</definition>
        <argsstring>(void)</argsstring>
        <name>test_loop_speed_invert</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="326" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="326" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1ae9cab257dbe8979b3a40004947163ebe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_loop_speed_invert_explicit</definition>
        <argsstring>(void)</argsstring>
        <name>test_loop_speed_invert_explicit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="351" column="1" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="351" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="matrix-test_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/lzm/Wayland/weston/tests/matrix-test.c" line="374" column="5" bodyfile="/home/lzm/Wayland/weston/tests/matrix-test.c" bodystart="374" bodyend="424"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>©<sp/>2012<sp/>Collabora,<sp/>Ltd.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>(including<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>next<sp/>paragraph)<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="matrix_8h" kindref="compound">libweston/matrix.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structinverse__matrix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structinverse__matrix_1aaea6626459d399c8760681d5f91f710e" kindref="member">LU</ref>[16];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>column-major<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structinverse__matrix_1a7f1555172c365e3d90c250e12981e375" kindref="member">perm</ref>[4];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>permutation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/><ref refid="matrix-test_8c_1ab2ebed32ce5f19fe61dfff979e6abc2b" kindref="member">begin_time</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="matrix-test_8c_1a1557e425f3e20a2e7e2a09506f47a809" kindref="member">reset_timer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock_gettime(CLOCK_MONOTONIC,<sp/>&amp;<ref refid="matrix-test_8c_1ab2ebed32ce5f19fe61dfff979e6abc2b" kindref="member">begin_time</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="matrix-test_8c_1a3ac8182bfa6bfd87462a55cae8010b56" kindref="member">read_timer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>t;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock_gettime(CLOCK_MONOTONIC,<sp/>&amp;t);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(t.tv_sec<sp/>-<sp/><ref refid="matrix-test_8c_1ab2ebed32ce5f19fe61dfff979e6abc2b" kindref="member">begin_time</ref>.tv_sec)<sp/>+</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1e-9<sp/>*<sp/>(t.tv_nsec<sp/>-<sp/><ref refid="matrix-test_8c_1ab2ebed32ce5f19fe61dfff979e6abc2b" kindref="member">begin_time</ref>.tv_nsec);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="matrix-test_8c_1aa731690caa06ede95c9f77247235d0fd" kindref="member">det3x3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c2)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c0[0]<sp/>*<sp/>c1[1]<sp/>*<sp/>c2[2]<sp/>+</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[0]<sp/>*<sp/>c2[1]<sp/>*<sp/>c0[2]<sp/>+</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[0]<sp/>*<sp/>c0[1]<sp/>*<sp/>c1[2]<sp/>-</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c0[2]<sp/>*<sp/>c1[1]<sp/>*<sp/>c2[0]<sp/>-</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1[2]<sp/>*<sp/>c2[1]<sp/>*<sp/>c0[0]<sp/>-</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2[2]<sp/>*<sp/>c0[1]<sp/>*<sp/>c1[0];</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="matrix-test_8c_1aaad6b73f3b51fe3ad74019792da53d89" kindref="member">determinant</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structweston__matrix" kindref="compound">weston_matrix</ref><sp/>*m)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>develop<sp/>on<sp/>last<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>-=<sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[3<sp/>+<sp/>0<sp/>*<sp/>4]<sp/>*<sp/><ref refid="matrix-test_8c_1aa731690caa06ede95c9f77247235d0fd" kindref="member">det3x3</ref>(&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[4],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[8],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[12]);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>+=<sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[3<sp/>+<sp/>1<sp/>*<sp/>4]<sp/>*<sp/><ref refid="matrix-test_8c_1aa731690caa06ede95c9f77247235d0fd" kindref="member">det3x3</ref>(&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[0],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[8],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[12]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>-=<sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[3<sp/>+<sp/>2<sp/>*<sp/>4]<sp/>*<sp/><ref refid="matrix-test_8c_1aa731690caa06ede95c9f77247235d0fd" kindref="member">det3x3</ref>(&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[0],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[4],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[12]);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>+=<sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[3<sp/>+<sp/>3<sp/>*<sp/>4]<sp/>*<sp/><ref refid="matrix-test_8c_1aa731690caa06ede95c9f77247235d0fd" kindref="member">det3x3</ref>(&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[0],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[4],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[8]);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>develop<sp/>on<sp/>first<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>+=<sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[0<sp/>+<sp/>0<sp/>*<sp/>4]<sp/>*<sp/><ref refid="matrix-test_8c_1aa731690caa06ede95c9f77247235d0fd" kindref="member">det3x3</ref>(&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[5],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[9],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[13]);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>-=<sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[0<sp/>+<sp/>1<sp/>*<sp/>4]<sp/>*<sp/><ref refid="matrix-test_8c_1aa731690caa06ede95c9f77247235d0fd" kindref="member">det3x3</ref>(&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[1],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[9],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[13]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>+=<sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[0<sp/>+<sp/>2<sp/>*<sp/>4]<sp/>*<sp/><ref refid="matrix-test_8c_1aa731690caa06ede95c9f77247235d0fd" kindref="member">det3x3</ref>(&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[1],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[5],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[13]);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>-=<sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[0<sp/>+<sp/>3<sp/>*<sp/>4]<sp/>*<sp/><ref refid="matrix-test_8c_1aa731690caa06ede95c9f77247235d0fd" kindref="member">det3x3</ref>(&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[1],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[5],<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[9]);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>det;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="matrix-test_8c_1a55006f65435787803ad6dbcc5c7c3a7d" kindref="member">print_permutation_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref><sp/>*m)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>m-&gt;<ref refid="structinverse__matrix_1a7f1555172c365e3d90c250e12981e375" kindref="member">perm</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*row[4]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>0<sp/>0<sp/>0\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0<sp/>1<sp/>0<sp/>0\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0<sp/>0<sp/>1<sp/>0\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0<sp/>0<sp/>0<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>P<sp/>=\n%s%s%s%s&quot;</highlight><highlight class="normal">,<sp/>row[p[0]],<sp/>row[p[1]],<sp/>row[p[2]],<sp/>row[p[3]]);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="matrix-test_8c_1a51622de3bf1a97501d337da88c0f5714" kindref="member">print_LU_decomposition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref><sp/>*m)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>r,<sp/>c;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>4;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>r)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>m-&gt;<ref refid="structinverse__matrix_1aaea6626459d399c8760681d5f91f710e" kindref="member">LU</ref>[r<sp/>+<sp/>c<sp/>*<sp/>4];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>r)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>%12.6f&quot;</highlight><highlight class="normal">,<sp/>v);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/>r)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>m-&gt;<ref refid="structinverse__matrix_1aaea6626459d399c8760681d5f91f710e" kindref="member">LU</ref>[r<sp/>+<sp/>c<sp/>*<sp/>4];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>%12.6f&quot;</highlight><highlight class="normal">,<sp/>v);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="matrix-test_8c_1acd5548b834f9c527dc85dcc9a03ed42a" kindref="member">print_inverse_data_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref><sp/>*m)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>r,<sp/>c;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>4;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>%12.6f&quot;</highlight><highlight class="normal">,<sp/>m-&gt;<ref refid="structinverse__matrix_1aaea6626459d399c8760681d5f91f710e" kindref="member">LU</ref>[r<sp/>+<sp/>c<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;permutation:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>4;<sp/>++r)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>m-&gt;<ref refid="structinverse__matrix_1a7f1555172c365e3d90c250e12981e375" kindref="member">perm</ref>[r]);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><ref refid="matrix-test_8c_1a7242782332abff8ad9c2e39c6603f962" kindref="member">print_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structweston__matrix" kindref="compound">weston_matrix</ref><sp/>*m)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>r,<sp/>c;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>4;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>4;<sp/>++c)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>%14.6e&quot;</highlight><highlight class="normal">,<sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[r<sp/>+<sp/>c<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><ref refid="matrix-test_8c_1a6d8ceb1a4e6d59dbb2e41f0c00b9752a" kindref="member">frand</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>random();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>/<sp/>(double)(RAND_MAX<sp/>/<sp/>2)<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><ref refid="matrix-test_8c_1a2db6dba92c0df9ea3cad8540e31145bb" kindref="member">randomize_matrix</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structweston__matrix" kindref="compound">weston_matrix</ref><sp/>*m)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>1</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[i]<sp/>=<sp/><ref refid="matrix-test_8c_1a6d8ceb1a4e6d59dbb2e41f0c00b9752a" kindref="member">frand</ref>()<sp/>*<sp/>exp(10.0<sp/>*<sp/><ref refid="matrix-test_8c_1a6d8ceb1a4e6d59dbb2e41f0c00b9752a" kindref="member">frand</ref>());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[i]<sp/>=<sp/><ref refid="matrix-test_8c_1a6d8ceb1a4e6d59dbb2e41f0c00b9752a" kindref="member">frand</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Take<sp/>a<sp/>matrix,<sp/>compute<sp/>inverse,<sp/>multiply<sp/>together</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>and<sp/>subtract<sp/>the<sp/>identity<sp/>matrix<sp/>to<sp/>get<sp/>the<sp/>error<sp/>matrix.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>Return<sp/>the<sp/>largest<sp/>absolute<sp/>value<sp/>from<sp/>the<sp/>error<sp/>matrix.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><ref refid="matrix-test_8c_1a2b5ff95e8150f57bc6068d96751940e0" kindref="member">test_inverse</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structweston__matrix" kindref="compound">weston_matrix</ref><sp/>*m)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref><sp/>q;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>errsup<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix_invert(q.LU,<sp/>q.perm,<sp/>m)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INFINITY;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverse_transform(q.LU,<sp/>q.perm,<sp/>&amp;m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[i<sp/>*<sp/>4]);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[0]<sp/>-=<sp/>1.0f;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[5]<sp/>-=<sp/>1.0f;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[10]<sp/>-=<sp/>1.0f;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[15]<sp/>-=<sp/>1.0f;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>fabs(m-&gt;<ref refid="structweston__matrix_1a525734d347a66825ef16f69d00ab82c0" kindref="member">d</ref>[i]);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>&gt;<sp/>errsup)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errsup<sp/>=<sp/>err;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errsup;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53adfa70e7c4b36a5c5c6b70987b50fc36c" kindref="member">TEST_OK</ref>,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53ae3c68600768a9c9232c28229acefa4ff" kindref="member">TEST_NOT_INVERTIBLE_OK</ref>,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53a95ff945c2f47eb10462e687007716732" kindref="member">TEST_FAIL</ref>,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53afab64b0806b411adc2f414c1e55ac175" kindref="member">TEST_COUNT</ref></highlight></codeline>
<codeline lineno="223"><highlight class="normal">};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><ref refid="matrix-test_8c_1a40180e42e1cf6c3fbbb74f44cb78ca67" kindref="member">test</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structweston__matrix" kindref="compound">weston_matrix</ref><sp/>m;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det,<sp/>errsup;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a2db6dba92c0df9ea3cad8540e31145bb" kindref="member">randomize_matrix</ref>(&amp;m);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>=<sp/><ref refid="matrix-test_8c_1aaad6b73f3b51fe3ad74019792da53d89" kindref="member">determinant</ref>(&amp;m);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errsup<sp/>=<sp/><ref refid="matrix-test_8c_1a2b5ff95e8150f57bc6068d96751940e0" kindref="member">test_inverse</ref>(&amp;m);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errsup<sp/>&lt;<sp/>1e-6)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53adfa70e7c4b36a5c5c6b70987b50fc36c" kindref="member">TEST_OK</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(det)<sp/>&lt;<sp/>1e-5<sp/>&amp;&amp;<sp/>isinf(errsup))</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53ae3c68600768a9c9232c28229acefa4ff" kindref="member">TEST_NOT_INVERTIBLE_OK</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;test<sp/>fail,<sp/>det:<sp/>%g,<sp/>error<sp/>sup:<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>det,<sp/>errsup);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53a95ff945c2f47eb10462e687007716732" kindref="member">TEST_FAIL</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><ref refid="matrix-test_8c_1a94ea34744ac382b8ee0fa54dc7d17c26" kindref="member">stopme</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><ref refid="matrix-test_8c_1aa08483b6b670ef8309eece96ffd08e1f" kindref="member">test_loop_precision</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counts[<ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53afab64b0806b411adc2f414c1e55ac175" kindref="member">TEST_COUNT</ref>]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nRunning<sp/>a<sp/>test<sp/>loop<sp/>for<sp/>10<sp/>seconds...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm(10);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref>)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts[<ref refid="matrix-test_8c_1a40180e42e1cf6c3fbbb74f44cb78ca67" kindref="member">test</ref>()]++;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;tests:<sp/>%d<sp/>ok,<sp/>%d<sp/>not<sp/>invertible<sp/>but<sp/>ok,<sp/>%d<sp/>failed.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Total:<sp/>%d<sp/>iterations.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts[<ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53adfa70e7c4b36a5c5c6b70987b50fc36c" kindref="member">TEST_OK</ref>],<sp/>counts[<ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53ae3c68600768a9c9232c28229acefa4ff" kindref="member">TEST_NOT_INVERTIBLE_OK</ref>],</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts[<ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53a95ff945c2f47eb10462e687007716732" kindref="member">TEST_FAIL</ref>],</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts[<ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53adfa70e7c4b36a5c5c6b70987b50fc36c" kindref="member">TEST_OK</ref>]<sp/>+<sp/>counts[<ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53ae3c68600768a9c9232c28229acefa4ff" kindref="member">TEST_NOT_INVERTIBLE_OK</ref>]<sp/>+</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts[<ref refid="matrix-test_8c_1ab48899087cc647f0f791ed0c459adc53a95ff945c2f47eb10462e687007716732" kindref="member">TEST_FAIL</ref>]);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__attribute__((noinline))</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><ref refid="matrix-test_8c_1a472fcf18477f32938f2d9f5361a43675" kindref="member">test_loop_speed_matrixvector</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structweston__matrix" kindref="compound">weston_matrix</ref><sp/>m;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structweston__vector" kindref="compound">weston_vector</ref><sp/>v<sp/>=<sp/>{<sp/>{<sp/>0.5,<sp/>0.5,<sp/>0.5,<sp/>1.0<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nRunning<sp/>3<sp/>s<sp/>test<sp/>on<sp/>weston_matrix_transform()...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix_8h_1a1a379a971f1948d4ccc8d76d58506078" kindref="member">weston_matrix_init</ref>(&amp;m);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm(3);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a1557e425f3e20a2e7e2a09506f47a809" kindref="member">reset_timer</ref>();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref>)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix_8h_1a8798df1cafe699c91c0cc477f7524c1b" kindref="member">weston_matrix_transform</ref>(&amp;m,<sp/>&amp;v);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/><ref refid="matrix-test_8c_1a3ac8182bfa6bfd87462a55cae8010b56" kindref="member">read_timer</ref>();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%lu<sp/>iterations<sp/>in<sp/>%f<sp/>seconds,<sp/>avg.<sp/>%.1f<sp/>ns/iter.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count,<sp/>t,<sp/>1e9<sp/>*<sp/>t<sp/>/<sp/>count);</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__attribute__((noinline))</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><ref refid="matrix-test_8c_1a8e1969744a7eb5dd4d58ef4fc9437d7d" kindref="member">test_loop_speed_inversetransform</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structweston__matrix" kindref="compound">weston_matrix</ref><sp/>m;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref><sp/>inv;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structweston__vector" kindref="compound">weston_vector</ref><sp/>v<sp/>=<sp/>{<sp/>{<sp/>0.5,<sp/>0.5,<sp/>0.5,<sp/>1.0<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nRunning<sp/>3<sp/>s<sp/>test<sp/>on<sp/>inverse_transform()...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix_8h_1a1a379a971f1948d4ccc8d76d58506078" kindref="member">weston_matrix_init</ref>(&amp;m);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix_invert(inv.LU,<sp/>inv.perm,<sp/>&amp;m);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm(3);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a1557e425f3e20a2e7e2a09506f47a809" kindref="member">reset_timer</ref>();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref>)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverse_transform(inv.LU,<sp/>inv.perm,<sp/>v.<ref refid="structweston__vector_1af55e9e0affe6cdee57a6ae499424fede" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/><ref refid="matrix-test_8c_1a3ac8182bfa6bfd87462a55cae8010b56" kindref="member">read_timer</ref>();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%lu<sp/>iterations<sp/>in<sp/>%f<sp/>seconds,<sp/>avg.<sp/>%.1f<sp/>ns/iter.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count,<sp/>t,<sp/>1e9<sp/>*<sp/>t<sp/>/<sp/>count);</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__attribute__((noinline))</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><ref refid="matrix-test_8c_1abb914aa1d0ea5171320f0e7f3ebac842" kindref="member">test_loop_speed_invert</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structweston__matrix" kindref="compound">weston_matrix</ref><sp/>m;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref><sp/>inv;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nRunning<sp/>3<sp/>s<sp/>test<sp/>on<sp/>matrix_invert()...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix_8h_1a1a379a971f1948d4ccc8d76d58506078" kindref="member">weston_matrix_init</ref>(&amp;m);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm(3);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a1557e425f3e20a2e7e2a09506f47a809" kindref="member">reset_timer</ref>();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref>)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix_invert(inv.LU,<sp/>inv.perm,<sp/>&amp;m);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/><ref refid="matrix-test_8c_1a3ac8182bfa6bfd87462a55cae8010b56" kindref="member">read_timer</ref>();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%lu<sp/>iterations<sp/>in<sp/>%f<sp/>seconds,<sp/>avg.<sp/>%.1f<sp/>ns/iter.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count,<sp/>t,<sp/>1e9<sp/>*<sp/>t<sp/>/<sp/>count);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__attribute__((noinline))</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><ref refid="matrix-test_8c_1ae9cab257dbe8979b3a40004947163ebe" kindref="member">test_loop_speed_invert_explicit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structweston__matrix" kindref="compound">weston_matrix</ref><sp/>m;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nRunning<sp/>3<sp/>s<sp/>test<sp/>on<sp/>weston_matrix_invert()...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix_8h_1a1a379a971f1948d4ccc8d76d58506078" kindref="member">weston_matrix_init</ref>(&amp;m);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm(3);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a1557e425f3e20a2e7e2a09506f47a809" kindref="member">reset_timer</ref>();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="matrix-test_8c_1a2f45113638a0b749a8a205d2cd7fb42b" kindref="member">running</ref>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix_8h_1a6deb2743e2b32947874410e92b8d83e7" kindref="member">weston_matrix_invert</ref>(&amp;m,<sp/>&amp;m);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/><ref refid="matrix-test_8c_1a3ac8182bfa6bfd87462a55cae8010b56" kindref="member">read_timer</ref>();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%lu<sp/>iterations<sp/>in<sp/>%f<sp/>seconds,<sp/>avg.<sp/>%.1f<sp/>ns/iter.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count,<sp/>t,<sp/>1e9<sp/>*<sp/>t<sp/>/<sp/>count);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="matrix-test_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>ding;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structweston__matrix" kindref="compound">weston_matrix</ref><sp/>M;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinverse__matrix" kindref="compound">inverse_matrix</ref><sp/>Q;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>errsup;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ding.sa_handler<sp/>=<sp/><ref refid="matrix-test_8c_1a94ea34744ac382b8ee0fa54dc7d17c26" kindref="member">stopme</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigemptyset(&amp;ding.sa_mask);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ding.sa_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigaction(SIGALRM,<sp/>&amp;ding,<sp/>NULL);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srandom(13);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M.d[0]<sp/>=<sp/>3.0;<sp/><sp/><sp/>M.d[4]<sp/>=<sp/>17.0;<sp/><sp/>M.d[8]<sp/>=<sp/>10.0;<sp/><sp/>M.d[12]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M.d[1]<sp/>=<sp/>2.0;<sp/><sp/><sp/>M.d[5]<sp/>=<sp/>4.0;<sp/><sp/><sp/>M.d[9]<sp/>=<sp/>-2.0;<sp/><sp/>M.d[13]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M.d[2]<sp/>=<sp/>6.0;<sp/><sp/><sp/>M.d[6]<sp/>=<sp/>18.0;<sp/><sp/>M.d[10]<sp/>=<sp/>-12;<sp/><sp/>M.d[14]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M.d[3]<sp/>=<sp/>0.0;<sp/><sp/><sp/>M.d[7]<sp/>=<sp/>0.0;<sp/><sp/><sp/>M.d[11]<sp/>=<sp/>0.0;<sp/><sp/>M.d[15]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>matrix_invert(Q.LU,<sp/>Q.perm,<sp/>&amp;M);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ret<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>ret);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;det<sp/>=<sp/>%g\n\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="matrix-test_8c_1aaad6b73f3b51fe3ad74019792da53d89" kindref="member">determinant</ref>(&amp;M));</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1acd5548b834f9c527dc85dcc9a03ed42a" kindref="member">print_inverse_data_matrix</ref>(&amp;Q);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;P<sp/>*<sp/>A<sp/>=<sp/>L<sp/>*<sp/>U\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a55006f65435787803ad6dbcc5c7c3a7d" kindref="member">print_permutation_matrix</ref>(&amp;Q);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a51622de3bf1a97501d337da88c0f5714" kindref="member">print_LU_decomposition</ref>(&amp;Q);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;a<sp/>random<sp/>matrix:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a2db6dba92c0df9ea3cad8540e31145bb" kindref="member">randomize_matrix</ref>(&amp;M);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>=<sp/><ref refid="matrix-test_8c_1aaad6b73f3b51fe3ad74019792da53d89" kindref="member">determinant</ref>(&amp;M);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a7242782332abff8ad9c2e39c6603f962" kindref="member">print_matrix</ref>(&amp;M);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errsup<sp/>=<sp/><ref refid="matrix-test_8c_1a2b5ff95e8150f57bc6068d96751940e0" kindref="member">test_inverse</ref>(&amp;M);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nThe<sp/>matrix<sp/>multiplied<sp/>by<sp/>its<sp/>inverse,<sp/>error:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a7242782332abff8ad9c2e39c6603f962" kindref="member">print_matrix</ref>(&amp;M);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;max<sp/>abs<sp/>error:<sp/>%g,<sp/>original<sp/>determinant<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>errsup,<sp/>det);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1aa08483b6b670ef8309eece96ffd08e1f" kindref="member">test_loop_precision</ref>();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a472fcf18477f32938f2d9f5361a43675" kindref="member">test_loop_speed_matrixvector</ref>();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1a8e1969744a7eb5dd4d58ef4fc9437d7d" kindref="member">test_loop_speed_inversetransform</ref>();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1abb914aa1d0ea5171320f0e7f3ebac842" kindref="member">test_loop_speed_invert</ref>();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matrix-test_8c_1ae9cab257dbe8979b3a40004947163ebe" kindref="member">test_loop_speed_invert_explicit</ref>();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/lzm/Wayland/weston/tests/matrix-test.c"/>
  </compounddef>
</doxygen>
